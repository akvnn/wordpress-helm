# Default values for wordpress-website.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: wordpress-website/example-website
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  # This sets the container port
  targetPort: 80

# Config Map Envrionment Variables. Change as needed
configMapEnv:
  WORDPRESS_DB_NAME: wp_db
  WORDPRESS_DB_USER: wp_user
  WORDPRESS_DB_HOST: postgres
  WP_HOME: https://chart-example.local
  WP_SITEURL: https://chart-example.local
  WORDPRESS_DB_PASSWORD: some-password
  AUTH_KEY: some-key
  SECURE_AUTH_KEY: some-key
  LOGGED_IN_KEY: some-key
  NONCE_KEY: some-key
  AUTH_SALT: some-salt
  SECURE_AUTH_SALT: some-salt
  LOGGED_IN_SALT: some-salt
  NONCE_SALT: some-salt

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Expected wordpress volumes for persistence.
volumes:
  - name: languages-volume
    persistentVolumeClaim:
      claimName: languages-volume-claim
  - name: logs-volume
    persistentVolumeClaim:
      claimName: logs-volume-claim
  - name: plugins-volume
    persistentVolumeClaim:
      claimName: plugins-volume-claim
  - name: uploads-volume
    persistentVolumeClaim:
      claimName: uploads-volume-claim

# Expected wordpress volumeMounts for persistence.
volumeMounts:
  - name: languages-volume
    mountPath: /var/www/html/wp-content/languages
  - name: logs-volume
    mountPath: /var/www/html/wp-content/logs
  - name: plugins-volume
    mountPath: /var/www/html/wp-content/plugins
  - name: uploads-volume
    mountPath: /var/www/html/wp-content/uploads

# Corresponding expected wordpress persistentVolumeClaims.
persistentVolumeClaims:
  - name: languages-volume-claim
    size: 10Gi
  - name: logs-volume-claim
    size: 500Gi
  - name: plugins-volume-claim
    size: 10Gi
  - name: uploads-volume-claim
    size: 50Gi

nodeSelector: {}

tolerations: []

affinity: {}
